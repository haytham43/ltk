## javaCustomParameterTemplate.vm
package org.llrp.ltk.generated.custom.parameters;

/*
 *
 * This file was generated by LLRP Code Generator 
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit/ for more information
 * Generated on: $utility.getDateNTime(); 
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */


## remember where this parameter is allowed in - use utility to store this information
	#foreach ($allowedIn in $custom.getAllowedIn())
		$utility.addAllowedIn($allowedIn.getType(), $custom.getName())
	#end

	
	
## some strings we need
#set($encode = ".encodeBinary()")	
#set($list = "List")
#set($length = ".length()")
#set($resName = "reserved")
#set($resType = "BitList")
#set($typeNum = ".typeNum")
#set($subtypeNr = ".subtype")
#set($add = ".add")
#set($emptyBrack = "()")

##set the class names here
#set ($parameterReference = "ParameterReference")
#set ($choiceReference = "ChoiceReference")
#set ($parameterDefinition = "ParameterDefinition")
#set ($choiceDefinition = "ChoiceDefinition")
#set ($reservedDefinition = "ReservedDefinition")
#set ($fieldDefinition = "FieldDefinition")
#set ($listRepeat = "1-N")
#set ($singleRepeat = "1")
#set ($optionalRepeat = "0-1")
#set ($optionalList = "0-N")
	
	

	
##imports
## must clear the helper set
$utility.clearImports()
## some imports are always needed
## remember imports to avoid importing twice the same

	import java.util.LinkedList;
	$utility.addImport("LinkedList")
	import java.util.List;
	$utility.addImport("List")
	import org.apache.log4j.Logger;
	$utility.addImport("logging")
	
	import org.llrp.ltk.types.LLRPBitList;
	$utility.addImport("LLRPBitList")
	import org.llrp.ltk.generated.parameters.Custom;
	$utility.addImport("Custom")
	import org.llrp.ltk.types.SignedShort;
	$utility.addImport("SignedShort")
	import org.llrp.ltk.types.UnsignedInteger;
	$utility.addImport("UnsignedInteger")
	import org.llrp.ltk.types.UnsignedShort;
	$utility.addImport("UnsignedShort")
	import org.llrp.ltk.exceptions.LLRPException;
	$utility.addImport("LLRPException")
	import org.llrp.ltk.exceptions.IllegalBitListException;
	$utility.addImport("IllegalBitListException")
	
	## field or reserved
	#foreach($field in $custom.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			#if (!$utility.hasImport($resType))
				import org.llrp.ltk.types.$resType;
				$utility.addImport($resType)
			#end
		#elseif ($utility.hasType($field,$fieldDefinition))
			## its a field and therefore it might be also an enumeration
			## only place where we can find super types of enumerations
			#if ($field.getEnumeration() && !$utility.hasImport($field.getEnumeration()))
				import org.llrp.ltk.generated.interfaces.$field.getEnumeration();
				$utility.setSuperType($field.getEnumeration(),$field.getType().value())
				$utility.addImport($field.getEnumeration())
			#elseif (!$utility.hasImport($utility.convertType($field.getType().value())))
				import org.llrp.ltk.types.$utility.convertType($field.getType().value());
				$utility.addImport($utility.convertType($field.getType().value()))
			#end
		## FieldDefinition
		#else
					//TODO template wrote this - unexpected object $field
		#end	
	#end
	
	
	## parameter or choice
	#foreach($field in $custom.getParameterOrChoice())
		##for choices we must also import implementing classes
		#if ($utility.hasType($field,$choiceReference))
			##check all subtypes
			#foreach ($subtype in $utility.getSubTypes($field.getType()))
				import org.llrp.ltk.generated.parameters.$subtype;
				$utility.addImport($subtype)
			#end
			import org.llrp.ltk.generated.interfaces.$field.getType();
			$utility.addImport($field.getType())
		#else
			#if (!$utility.hasImport($field.getType()))
				import org.llrp.ltk.generated.parameters.$field.getType();
				$utility.addImport($field.getType())
			#end
		#end
	#end
	
	##import interfaces to implement
	#foreach ($interface in $utility.getInterfaces($custom.getName()))
		import org.llrp.ltk.generated.interfaces.$interface;
		$utility.addImport($interface)
	#end
##end imports



## beginning of class
public class $custom.getName() extends Custom{




##subtype is always needed
	public static final UnsignedInteger subtype = new UnsignedInteger($custom.getSubtype());
##need always a logging
	private static final Logger logging = Logger.getLogger("$custom.getName()");

## field or reserved
#foreach($field in $custom.getFieldOrReserved())
	## reserved field
	#if ($utility.hasType($field,$reservedDefinition))
		private $resType $resName = new $resType ($field.getBitCount());
	#elseif ($utility.hasType($field,$fieldDefinition))
		#if ($field.getEnumeration())
			private $field.getEnumeration() $utility.firstToLowerCase($field.getName());
		#else
			private $utility.convertType($field.getType().value()) $utility.firstToLowerCase($field.getName());
		#end
	## FieldDefinition
	#else
				//TODO template wrote this - unexpected object $field
	#end	
#end


## parameter or choice
#foreach($field in $custom.getParameterOrChoice())
	## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
	## however there are some exceptions to this where there is a name given

	#if ($field.getName())
		#set ($curName = $utility.firstToLowerCase($field.getName()))
	#else
		#set ($curName = $utility.firstToLowerCase($field.getType()))
	#end 	
	#if ($field.getRepeat()== $listRepeat || $field.getRepeat()== $optionalList)
		private List<$field.getType()> $curName$list = new LinkedList<$field.getType()>();
	#else
		private $field.getType() $curName;
	#end
#end

## constructors

	public $custom.getName()(){
	}
	
	public $custom.getName()(LLRPBitList list){
		decodeBinary(list);
	}

	public $custom.getName()(Custom custom){
		decodeBinary(custom.encodeBinary());
	}
	
## encode method
	public LLRPBitList encodeBinarySpecific(){
	LLRPBitList resultBits = new LLRPBitList();
	## inherited from custom - must also be encoded
	if (vendorIdentifier== null){
		logging.warn(" vendorIdentifier not set");
	} 
	resultBits.append(vendorIdentifier.encodeBinary());
	if (parameterSubtype== null){
		logging.warn(" parameterSubtype not set");
	} 
			resultBits.append(parameterSubtype.encodeBinary());
	## field or reserved
	#foreach($field in $custom.getFieldOrReserved())
		#if ($utility.hasType($field,$reservedDefinition))
			resultBits.append($resName$encode);
		#elseif ($utility.hasType($field,$fieldDefinition))
			if ($utility.firstToLowerCase($field.getName())== null){
				logging.warn(" $utility.firstToLowerCase($field.getName()) not set");
			} 
			resultBits.append($utility.firstToLowerCase($field.getName())$encode);
		## FieldDefinition
		#else
			//TODO template parameter encode wrote this - unexpected object $field
		#end
	#end
	## parameter or choice
	#foreach($field in $custom.getParameterOrChoice())
		## parameters usually don't have names, so the variable gets the type with first letter to lower case as name
		## however there are some exceptions to this where there is a name given

		#if ($field.getName())
			#set ($curName = $utility.firstToLowerCase($field.getName()))
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end
		## check if it is a list 	
		#if ($field.getRepeat()==$listRepeat  || $field.getRepeat()== $optionalList)
			if ($curName$list== null){
				logging.warn(" $curName$list not set");
			} 
			for ($field.Type field : $curName$list){
				resultBits.append(field$encode);
			}
		#elseif ($field.getRepeat()==$optionalRepeat)
			if ($curName != null){
				// optional parameter, may be null
				logging.warn(" $curName not set");
				resultBits.append($curName$encode);
			} 
		#else
			if ($curName == null){
				logging.warn(" $curName not set");
			} 
			resultBits.append($curName$encode);
		#end
	#end
		return resultBits;
	}


##decode
  
  	@Override
	protected void decodeBinarySpecific(LLRPBitList binary) {
		int position = 0;
		int tempByteLength;
		int tempLength;
		int count;
		SignedShort type;
		int fieldCount;
		Custom custom;
		
		## vendorIdentifier and parameterSubtye are inherited from custom
		vendorIdentifier = new UnsignedInteger (binary.subList(position, UnsignedInteger.length()));
		position += UnsignedInteger.length();
																															// length given through static method
		parameterSubtype = new UnsignedInteger (binary.subList(position, UnsignedInteger.length()));
		position += UnsignedInteger.length();
		
		## field or reserved
		#foreach($field in $custom.getFieldOrReserved())
			## reserved field
			#if ($utility.hasType($field,$reservedDefinition))
				position+= $resName$length;
			#elseif ($utility.hasType($field,$fieldDefinition))
				#set ($curName = $utility.firstToLowerCase($field.getName()))
				#if ($field.getEnumeration())
					#set ($curType = $field.getEnumeration())
				#else
					#set ($curType = $utility.convertType($field.getType().value()))
				#end
				#if ($utility.isArray($curType))
					// array. first 16 bits indicate length of array
					fieldCount = new UnsignedShort(binary.subList(position, UnsignedShort.length())).toShort();			
					tempLength=$curType$length*fieldCount+UnsignedShort.length();
					$curName = new $curType (binary.subList(position, tempLength));
					position += tempLength;
					//might need padding
					// must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
					if (tempLength%8>0){
						position+=(8-tempLength%8);
					} 
				#elseif ($utility.isByteToEnd($curType))
					$curName = new $curType (binary.subList(position, binary.length()-position));
					position += binary.length()-position;

				#else
					// length given through static method
					$curName = new $curType (binary.subList(position, $curType$length));
					position += $curType$length;
				#end
			#else
						//TODO template wrote this - unexpected object $field
			#end
		#end  
		
		
		## parameter or choice
		#foreach($field in $custom.getParameterOrChoice())
		## get name first, not all have a name attribute
		#if ($field.getName())
			#set ($curName = $utility.firstToLowerCase($field.getName()))
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end
		
		## check if it is a list 	
		#if ($field.getRepeat()==$listRepeat  || $field.getRepeat()== $optionalList)
			// list of parameters
			$curName$list = new LinkedList<$field.getType()>();
			while (position < binary.length()){
				boolean atLeastOnce = false;
				// look ahead to see type
				type = new SignedShort(binary.subList(position+reservedLength, typeNumberLength));
				tempByteLength = new UnsignedShort(binary.subList(position+16, 16)).toShort();			
				tempLength=8*tempByteLength;
				##distinguish between choices and parameters. For choices, we must find the actual types
				#if ($utility.hasType($field,$choiceReference))
					//choiceRef
					##check all subtypes
					#foreach ($subtype in $utility.getSubTypes($field.getType()))
						#if ($utility.isCustom($subtype))
							## custom parameter need separate treatment
							// custom
							custom = new Custom(binary.subList(position,tempLength)); 
							//allowed custom parameters for this parameter	
							#foreach ($custom in $utility.allowedCustom($custom.getName()))
								if (custom.getParameterSubtype == $custom$subtypeNr){ 
									$curName$list$add (new $custom (custom));
								}
							#end
							//end allowed parameters
						#else						
							if (type.equals($subtype$typeNum)){
								$curName$list$add (new $subtype (binary.subList(position,tempLength)));
								position+=tempLength;
								atLeastOnce = true;
								continue;
							}
						#end
						
					#end
					
					//if no parameter matched, jump out of while loop, if it is not an optional parameter, show warning
					if (!atLeastOnce && (" $field.getRepeat() ".equals(" $listRepeat "))){
						logging.warn("no parameter for $curName$list but List is not optional");
					}
					break;
				#elseif ($utility.isCustom($field.getType()))
					## custom parameter need separate treatment
					// custom
					custom = new $field.getType() (binary.subList(position,tempLength)); 	
					#foreach ($custom in $utility.allowedCustom($custom.getName()))
						if (custom.getParameterSubtype == $custom$subtypeNr){ 
							$curName$list$add (new $custom (custom));
						}
					#end
				#elseif ($utility.hasType($field,$parameterReference))
					//paramRef
					$curName$list$add (new $field.getType() (binary.subList(position,tempLength)));
					position+=tempLength;		
				#else
					//TODO template wrote this in decode > list- unexpected object $field in while
				#end
			}
			


		#elseif ($field.getRepeat()==$singleRepeat || $field.getRepeat()==$optionalRepeat)
			##may be optional or exactly once
			// look ahead to see type
			// may be optional or exactly once
			#if ($field.getRepeat()==$optionalRepeat)
				## If it is an optional parameter, binary list might be finished - we add a check only in this case
				if (position < binary.length()){
				// we checked to see if binary is finished since this is an optional parameter
			#end
					type = new SignedShort(binary.subList(position+reservedLength, typeNumberLength));
					tempByteLength = new UnsignedShort(binary.subList(position+reservedLength+ typeNumberLength, UnsignedShort.length())).toShort();			
					tempLength=8*tempByteLength;
					##distinguish between choices and parameters. For choices, we must find the actual types
					#if ($utility.hasType($field,$choiceReference))
						##check all subtypes
						boolean found = false;
						#foreach ($subtype in $utility.getSubTypes($field.getType()))
							#if ($utility.isCustom($subtype))
								## custom parameter need separate treatment
								// custom
								custom = new $field.getType() (binary.subList(position,tempLength)); 	
								#foreach ($custom in $utility.allowedCustom($field.getType()))
									if (custom.getParameterSubtype == $custom$subtypeNr){ 
										$curName$list$add (new $custom (custom));
									}
								#end
							#else						
								if (typeNum.equals($subtype$typeNum)){
									$curName = new $subtype (binary.subList(position,tempLength));
									position += tempLength;
									found = true;
								}
							#end
						#end
						if (!found){
							logging.warn("no parameter for $curName but it is not optional");
						}
					#elseif ($utility.isCustom($field.getType()))
						## custom parameter need separate treatment
						// custom
						custom = new $field.getType() (binary.subList(position,tempLength)); 	
						#foreach ($custom in $utility.allowedCustom($field.getType()))
							if (custom.getParameterSubtype == $custom$subtypeNr){ 
								$curName$list$add (new $custom (custom));
							}
						#end
					#elseif ($utility.hasType($field,$parameterReference))
						if(type.equals($field.getType()$typeNum)){
							$curName = new $field.getType() (binary.subList(position,tempLength));	
							position+=tempLength;
						} else {
						## if it is an optional parameter it is ok to come to here. Therefor only print an error message if it is not optional
							#if ($field.getRepeat()==$singleRepeat )
								// its an error - parameter must be here
								logging.warn("parameter "+$curName +" not set but it is not optional");
								//throw new IllegalBitListException("parameter expected: $field.getType() but recieved " + type );
							#else
								logging.info("parameter "+$curName +" not set");
							#end
						}	
					#else
						//TODO template wrote this - unexpected object $field
					#end
			#if ($field.getRepeat()==$optionalRepeat)
				##closing parenthesis to if statement before
				}	
			#end
		#else
			// TODO repeat is $field.getRepeat() but this is not yet implemented
		#end
	#end
  	}
  	






## generate getters 
	//getters
	## field or reserved
	#foreach($field in $custom.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			## nothing
		#elseif ($utility.hasType($field,$fieldDefinition))
		
			#if ($field.getEnumeration())
				public $field.getEnumeration() get$field.getName()$emptyBrack{
					return $utility.firstToLowerCase($field.getName());
				}
			#else
				public $utility.convertType($field.getType().value()) get$field.getName()$emptyBrack{
					return $utility.firstToLowerCase($field.getName());
				}
			#end

		## FieldDefinition
		#else
					//TODO template wrote this - unexpected object $field
		#end	
	#end


	## parameter or choice
	#foreach($field in $custom.getParameterOrChoice())
		## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
		## however there are some exceptions to this where there is a name given
		#if ($field.getName())
			#set ($curName = $utility.firstToLowerCase($field.getName()))
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end 
		#if ($field.getRepeat()== $listRepeat  || $field.getRepeat()== $optionalList)
			public List<$field.getType()> get$utility.firstToUpperCase($curName)$list$emptyBrack {
				return $curName$list;
			}
				
		#else
			public $field.getType() get$utility.firstToUpperCase($curName)$emptyBrack  {
				return $curName;
			}
		#end
	#end


	
## generate setters 
	//setters
	## field or reserved
	#foreach($field in $custom.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			## nothing
		#elseif ($utility.hasType($field,$fieldDefinition))
			#if ($field.getEnumeration())
				public void  set$field.getName() ($field.getEnumeration() $utility.firstToLowerCase($field.getName())){
					this.$utility.firstToLowerCase($field.getName()) = $utility.firstToLowerCase($field.getName());
				}
			#else
				public void  set$field.getName() ($utility.convertType($field.getType().value()) $utility.firstToLowerCase($field.getName())){
					this.$utility.firstToLowerCase($field.getName()) = $utility.firstToLowerCase($field.getName());
				}
			#end

		## FieldDefinition
		#else
					//TODO template wrote this - unexpected object $field
		#end	
	#end


	## parameter or choice
	#foreach($field in $custom.getParameterOrChoice())
		## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
		## however there are some exceptions to this where there is a name given
		#if ($field.getName())
			#set ($curName = $utility.firstToLowerCase($field.getName()))
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end 
		#if ($field.getRepeat()== $listRepeat  || $field.getRepeat()== $optionalList)
			public void set$utility.firstToUpperCase($curName)$list (List<$field.getType()> $curName$list) {
				this.$curName$list = $curName$list;
			}
				
		#else
			public void set$utility.firstToUpperCase($curName) ($field.getType()  $curName)  {
				this. $curName =  $curName;
			}
		#end
	#end

	
	
## end of Class	
}
