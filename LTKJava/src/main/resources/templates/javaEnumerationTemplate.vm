## javaEnumerationTemplate.vm

package org.llrp.ltk.generated.enumerations;

	
/*
 *
 * This file was generated by LLRP Code Generator 
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit/ for more information
 * Generated on: $utility.getDateNTime(); 
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */

	import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.exceptions.LLRPException;
import org.llrp.ltk.types.$utility.getSuperType($enum.getName());

import org.jdom.Element;
import org.jdom.Text;
import org.jdom.Content;

public class $enum.getName() extends $utility.getSuperType($enum.getName()){

	public $enum.getName() (Integer value){
		super(value);
		if (!isValidValue(value)){
			throw new IllegalArgumentException("Value not allowed");
		}
	}
	
	public $enum.getName() (Element element){
		this.value = new Integer(getValue(element.getText()));
	}
	
	public $enum.getName() (String name){
		if (!isValidName(name)){
			throw new IllegalArgumentException("Name not allowed");
		}
		value = getValue(name);
		signed = false;			
	}

	public $enum.getName() (LLRPBitList list){
		decodeBinary(list);
		if (!isValidValue(new Integer(toInteger()))){
			throw new LLRPException("Value not allowed");
		}		
	}
	
	
	public void set(String name){
		if (!isValidName(name)) throw new IllegalArgumentException("name not allowed");
		value = getValue(name);
	}
	
	public void set(Integer value){
		if (!isValidValue(value)) throw new IllegalArgumentException("value not allowed");
		this.value = value;
	}
	
	@Override
    public Content encodeXML(String name) {

    	Element element = new Element(name);
    	element.setContent(new Text(toString()));
        return element;
    }
	
	public String toString(){
		return getName(toInteger());
	}



		private boolean isValidValue(Integer value){
			switch (value){
				#foreach ($entry in $enum.getEntry())
				case $entry.getValue(): return true;
				#end
				default: return false;
			}
		}
	
		private int getValue(String name){
				#foreach ($entry in $enum.getEntry())
					if ( name.equalsIgnoreCase("$entry.getName()") ) return $entry.getValue();
				#end
				return -1;
		}
		
		private String getName(int value){
			#foreach ($entry in $enum.getEntry())
				if ($entry.getValue() == value ) return "$entry.getName()";
			#end
			return "";
		}
		private boolean isValidName(String name){
			#foreach ($entry in $enum.getEntry())
				if (name.equals("$entry.getName()") ) return true;
			#end
			return false;
		}
		
}
