## javaEnumerationTemplate.vm	
/*
 *
 * This file was generated by LLRP Code Generator 
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit/ 
 * for more information
 * Generated on: $utility.getDateNTime(); 
 *
 */

/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
 * See the License for the specific language governing permissions and 
 * limitations under the License.
 *
 */

package org.llrp.ltk.generated.enumerations;



	import org.llrp.ltk.types.LLRPBitList;
import org.llrp.ltk.exceptions.LLRPException;
import org.llrp.ltk.types.$utility.getSuperType($enum.getName());
import org.llrp.ltk.types.LLRPEnumeration;

import org.jdom.Element;
import org.jdom.Text;
import org.jdom.Content;
import org.jdom.Namespace;


/**
 * $enum.getName() is Enumeration of Type $utility.getSuperType($enum.getName())
 * Use isValidValue to check if value to be set is allowed.
 */
public class $enum.getName() extends $utility.getSuperType($enum.getName()) implements LLRPEnumeration{

	
	/**
	 * Create new $parameter.getName() by passing integer value.
	 *
	 * @throw IllegalArgumentException
	 * if the value is not allowed for this enumeration
	 * @param value an Integer value allowed - might check first
	 * with isValidValue it it is an allowed value
	 */
	public $enum.getName() (final Integer value){
		super(value);
		if (!isValidValue(value)){
			throw new IllegalArgumentException("Value not allowed");
		}
	}
	
	/**
	 * Create new $parameter.getName() by passing jdom element.
	 *
	 * @throw IllegalArgumentException
	 * if the value found in element is not allowed 
	 * for this enumeration.
	 * @param element - jdom element where the child is a string
	 * that is the name for a value of the enumeration.
	 */
	public $enum.getName() (final Element element){
		this.value = new Integer(getValue(element.getText()));
		if (!isValidValue(this.value)){
			throw new IllegalArgumentException("Value not allowed");
		}
	}

	/**
	 * Create new $parameter.getName() by passing a string.
	 *
	 * @throw IllegalArgumentException
	 * if the string does not stand for a valid value.
	 * @param name - name for a value
	 */	
	public $enum.getName() (final String name){
		if (!isValidName(name)){
			throw new IllegalArgumentException("Name not allowed");
		}
		value = getValue(name);
		signed = false;			
	}

	/**
	 * Create new $parameter.getName() by passing LLRPBitList.
	 *
	 * @throw IllegalArgumentException
	 * if the value found in the BitList is not allowed
	 * for this enumeration.
	 * @param list - LLRPBitList
	 */
	public $enum.getName() (final LLRPBitList list){
		decodeBinary(list);
		if (!isValidValue(new Integer(toInteger()))){
			throw new LLRPException("Value not allowed");
		}		
	}
	
	/**
	 * set the current value of this enumeration to the 
	 * value identified by given string.
	 *
	 * @throw IllegalArgumentException
	 * if the value found for given String is not allowed
	 * for this enumeration.
	 * @param name set this enumeration to hold one of the allowed values
	 */
	public final void set(final String name){
		if (!isValidName(name)) throw new IllegalArgumentException("name not allowed");
		value = getValue(name);
	}

	/**
	 * set the current value of this enumeration to the 
	 * value given.
	 *
	 * @throw IllegalArgumentException
	 * if the value is not allowed
	 * for this enumeration.
	 * @param value to be set 
	 */	
	public final void set(final Integer value){
		if (!isValidValue(value)) throw new IllegalArgumentException("value not allowed");
		this.value = value;
	}

	/**
		* {@inheritDoc}
	 */	
    public Content encodeXML(final String name, Namespace ns) {

    	Element element = new Element(name,ns);
    	element.setContent(new Text(toString()));
        return element;
    }
	
	/**
		* {@inheritDoc}
	 */	
	public String toString(){
		return getName(toInteger());
	}


	/**
		* {@inheritDoc}
            * @implements LLRPEnumeration.isValidValue(Integer value)
	 */	
		public boolean isValidValue(final Integer value){
			switch (value){
				#foreach ($entry in $enum.getEntry())
				case $entry.getValue(): return true;
				#end
				default: return false;
			}
		}


	/**
		* {@inheritDoc}
            * @implements LLRPEnumeration.getName(int value)
	 */	
		public final String getName(int value){
			#foreach ($entry in $enum.getEntry())
				if ($entry.getValue() == value ) return "$entry.getName()";
			#end
			return "";
		}
		
		
	/**
		* {@inheritDoc}
            * @implements LLRPEnumeration.getValue(String name)
	 */		
		public final int getValue(final String name){
				#foreach ($entry in $enum.getEntry())
					if ( name.equalsIgnoreCase("$entry.getName()") ) return $entry.getValue();
				#end
				return -1;
		}
		
    /**
             * {@inheritDoc}
    * @implements LLRPEnumeration.getName(Integer value)
     */
    public final String getName(final Integer value) {
			#foreach ($entry in $enum.getEntry())
				if ($entry.getValue() == value ) return "$entry.getName()";
			#end
			return "";
		}
		
		/**
		 	* {@inheritDoc}
            * @implements LLRPEnumeration.isValidName(String name)
		 */	
		public boolean isValidName(final String name){
			#foreach ($entry in $enum.getEntry())
				if (name.equals("$entry.getName()") ) return true;
			#end
			return false;
		}
		
	 
		
		    /**
     * number of bits used to represent this type.
     *
     * @return Integer
     */
    public static Integer length() {
    	#set($length = ".length()")
        return $utility.getSuperType($enum.getName())$length; 
    }
}
