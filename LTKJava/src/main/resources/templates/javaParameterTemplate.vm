## javaParameterTemplate.vm
package org.llrp.ltk.generated.parameters;

	
/*
 *
 * This file was generated by LLRP Code Generator 
 * see http://llrp-toolkit.cvs.sourceforge.net/llrp-toolkit/ for more information
 * Generated on: $utility.getDateNTime(); 
 *
 */
	
/*
 * Copyright 2007 ETH Zurich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at 
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software 
 * distributed under the License is distributed on an "AS IS" BASIS, 
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
 * See the License for the specific language governing permissions and limitations under the License.
 *
 */
	
## some strings we need
#set($encode = ".encodeBinary()")
#set($encodeXML = ".encodeXML")	
#set($list = "List")
#set($length = ".length()")
#set($lengthField = ".length")
#set($resName = "reserved")
#set($resType = "BitList")
#set($typeNum = ".typeNum")
#set($subtypeNr = ".subtype")
#set($add = ".add")
#set($emptyBrack = "()")

##set the class names here
#set ($parameterReference = "ParameterReference")
#set ($choiceReference = "ChoiceReference")
#set ($parameterDefinition = "ParameterDefinition")
#set ($choiceDefinition = "ChoiceDefinition")
#set ($reservedDefinition = "ReservedDefinition")
#set ($fieldDefinition = "FieldDefinition")
#set ($listRepeat = "1-N")
#set ($singleParameter = "1")
#set ($optionalParameter = "0-1")
#set ($optionalRepeat = "0-N")
	
	
	
##imports
## must clear the helper set
$utility.clearImports()
## some imports are always needed
## remember imports to avoid importing twice the same

	import java.util.LinkedList;
	$utility.addImport("LinkedList")
	import java.util.List;
	$utility.addImport("List")
	import org.apache.log4j.Logger;
	$utility.addImport("logging")
	
	
	import org.jdom.Document;
	$utility.addImport("document")
	import org.jdom.Element;
	$utility.addImport("element")
	import org.jdom.Content;
	$utility.addImport("content")
	
	import org.llrp.ltk.types.LLRPBitList;
	$utility.addImport("LLRPBitList")
	import org.llrp.ltk.types.LLRPMessage;
	$utility.addImport("LLRPMessage")
	import org.llrp.ltk.types.SignedShort;
	$utility.addImport("SignedShort")
	import org.llrp.ltk.types.UnsignedShort;
	$utility.addImport("UnsignedShort")
	import org.llrp.ltk.exceptions.LLRPException;
	$utility.addImport("LLRPException")
	import org.llrp.ltk.exceptions.MissingParameterException;
	$utility.addImport("MissingParameterException")
	import org.llrp.ltk.exceptions.IllegalBitListException;
	$utility.addImport("IllegalBitListException")
	import org.llrp.ltk.exceptions.WrongParameterException;
	$utility.addImport("WrongParameterException")
	import org.llrp.ltk.types.TLVParameter;
	$utility.addImport("TLVParameter")
	import org.llrp.ltk.types.TVParameter;
	$utility.addImport("TVParameter")
	
	
	##custom parameters
	#foreach ($custom in $utility.allowedCustom($parameter.getName()))
	import org.llrp.ltk.generated.custom.parameters.$custom;
	$utility.addImport($custom)
	#end
	## field or reserved
	#foreach($field in $parameter.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			#if (!$utility.hasImport($resType))
				import org.llrp.ltk.types.$resType;
				$utility.addImport($resType)
			#end
		#elseif ($utility.hasType($field,$fieldDefinition))
			## its a field and therefore it might be also an enumeration
			## only place where we can find super types of enumerations
			#if ($field.getEnumeration() && !$utility.hasImport($field.getEnumeration()))
				import org.llrp.ltk.generated.enumerations.$field.getEnumeration();
				$utility.setSuperType($field.getEnumeration(),$field.getType().value())
				$utility.addImport($field.getEnumeration())
			#elseif (!$utility.hasImport($utility.convertType($field.getType().value())))
				import org.llrp.ltk.types.$utility.convertType($field.getType().value());
				$utility.addImport($utility.convertType($field.getType().value()))
			#end
		## FieldDefinition
		#else
					//TODO template wrote this - unexpected object $field
		#end	
	#end
	
	
	## parameter or choice
	#foreach($field in $parameter.getParameterOrChoice())
		##for choices we must also import implementing classes
		#if ($utility.hasType($field,$choiceReference))
			##check all subtypes
			#foreach ($subtype in $utility.getSubTypes($field.getType()))
				import org.llrp.ltk.generated.parameters.$subtype;
				$utility.addImport($subtype)
			#end
			import org.llrp.ltk.generated.interfaces.$field.getType();
			$utility.addImport($field.getType())
		#else
			#if (!$utility.hasImport($field.getType()))
				import org.llrp.ltk.generated.parameters.$field.getType();
				$utility.addImport($field.getType())
			#end
		#end
	#end
	
	##import interfaces to implement
	#foreach ($interface in $utility.getInterfaces($parameter.getName()))
		import org.llrp.ltk.generated.interfaces.$interface;
		$utility.addImport($interface)
	#end
##end imports
	
	
		
/**
 * $parameter.getAnnotation().get(0).getChildNodes().item(0).item(0).getNodeValue();
 */
 
## TV Parameters have type number from 0 - 127, TLV from 128 - 2047
#if ($parameter.getTypeNum() < 128)
	#set ($superType = "TVParameter")
#else
	#set ($superType = "TLVParameter")
#end

##set interfaces
#set ($interfaces = "")
#set ($first = true)
#foreach ($interface in $utility.getInterfaces($parameter.getName()))
	#if ($first)
		#set ($interfaces = "implements $interface")
		#set ($first = false)
	#else
		#set ($interfaces = "$interfaces, $interface")
	#end
#end



## beginning of class
public class $parameter.Name extends $superType $interfaces{						

##typeNum is always needed
	public static final SignedShort typeNum = new SignedShort((new Integer($parameter.getTypeNum())).shortValue());
##need always a logging
	private static final Logger logging = Logger.getLogger("$parameter.getName()");
## field or reserved
#foreach($field in $parameter.getFieldOrReserved())
	## reserved field
	#if ($utility.hasType($field,$reservedDefinition))
		protected $resType $resName = new $resType ($field.getBitCount());
	#elseif ($utility.hasType($field,$fieldDefinition))
		#if ($field.getEnumeration())
			protected $field.getEnumeration() $utility.firstToLowerCase($field.getName());
		#else
			protected $utility.convertType($field.getType().value()) $utility.firstToLowerCase($field.getName());
		#end
	## FieldDefinition
	#else
				//TODO template wrote this - unexpected object $field
	#end	
#end


## parameter or choice
#foreach($field in $parameter.getParameterOrChoice())
	## parameters usually don't have names, so the variable gets the type with first letter to lower case as name
	## however there are some exceptions to this where there is a name given

	#if ($field.getName())
		#set ($curName = $utility.firstToLowerCase($field.getName()))
	#else
		#set ($curName = $utility.firstToLowerCase($field.getType()))
	#end 	
	
	#if ($field.getRepeat() == $listRepeat || $field.getRepeat() == $optionalRepeat)
		protected List<$field.getType()> $curName$list = new LinkedList<$field.getType()>();
	#else
		protected $field.getType() $curName;
	#end
#end

## constructors

	public $parameter.getName()(){
	}
	
	public $parameter.getName()(LLRPBitList list){
		decodeBinary(list);
	}

	
	public $parameter.getName()(Element element){
		decodeXML(element);
	}
	
## encode method
	public LLRPBitList encodeBinarySpecific(){
	LLRPBitList resultBits = new LLRPBitList();
	## field or reserved
	#foreach($field in $parameter.getFieldOrReserved())
		#if ($utility.hasType($field,$reservedDefinition))
			resultBits.append($resName$encode);
		#elseif ($utility.hasType($field,$fieldDefinition))
			if ($utility.firstToLowerCase($field.getName())== null){
				logging.warn(" $utility.firstToLowerCase($field.getName()) not set");
				throw new MissingParameterException(" $utility.firstToLowerCase($field.getName()) not set  for Parameter of Type $parameter.getType()");
			} 
			resultBits.append($utility.firstToLowerCase($field.getName())$encode);
		## FieldDefinition
		#else
			//TODO template parameter encode wrote this - unexpected object $field
		#end
	#end
	## parameter or choice
	#foreach($field in $parameter.getParameterOrChoice())
		## parameters usually don't have names, so the variable gets the type with first letter to lower case as name
		## however there are some exceptions to this where there is a name given

		#if ($field.getName())
			#set ($curName = $utility.firstToLowerCase($field.getName()))
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end
		## check if it is a list 	
		#if ($field.getRepeat()==$listRepeat)
			// $field.getRepeat()
			if ($curName$list== null){
				logging.warn(" $curName$list not set");
				//parameter has to be set - throw exception
				throw new MissingParameterException(" $curName$list not set");
			} else {
				for ($field.Type field : $curName$list){
					resultBits.append(field$encode);
				}
			}
		#elseif ($field.getRepeat()==$optionalRepeat)
			// $field.getRepeat()
			if ($curName$list== null){
				//just warn - it is optional 
				logging.warn(" $curName$list not set");
			} else {
				for ($field.Type field : $curName$list){
					resultBits.append(field$encode);
				}
			}
		#elseif ($field.getRepeat()==$singleParameter)
			// $field.getRepeat()
			if ($curName == null){
				// single parameter, may not be null
				logging.warn(" $curName not set");
				throw new MissingParameterException(" $curName not set");
			} else {
				resultBits.append($curName$encode);
			}
		#elseif ($field.getRepeat()==$optionalParameter)
			// $field.getRepeat()
			if ($curName == null){
				// optional parameter, may be null
				logging.warn(" $curName not set");
			} else {
				resultBits.append($curName$encode);
			}
				 
		#else
			// TODO field.getRepeat = $field.getRepeat() not handled
		#end
	#end
		return resultBits;
	}


## encode xml
	public Content encodeXML(String name){
		Element xmlElement = new Element(name);
		
		## field or reserved
		#foreach($field in $parameter.getFieldOrReserved())
			#if ($utility.hasType($field,$reservedDefinition))
				xmlElement.addContent($resName$encodeXML("$field.getType()"));
			#elseif ($utility.hasType($field,$fieldDefinition))
				if ($utility.firstToLowerCase($field.getName())== null){
					logging.warn(" $utility.firstToLowerCase($field.getName()) not set");
					throw new MissingParameterException(" $utility.firstToLowerCase($field.getName()) not set");
				} else {
					xmlElement.addContent($utility.firstToLowerCase($field.getName())$encodeXML("$field.getName()"));
				}
			## FieldDefinition
			#else
				//TODO template parameter encode wrote this - unexpected object $field
			#end
		#end
		## parameter or choice
		#foreach($field in $parameter.getParameterOrChoice())
			## parameters usually don't have names, so the variable gets the type with first letter to lower case as name
			## however there are some exceptions to this where there is a name given
	
			#if ($field.getName())
				#set ($curName = $utility.firstToLowerCase($field.getName()))
			#else
				#set ($curName = $utility.firstToLowerCase($field.getType()))
			#end
			## check if it is a list 	
			#if ($field.getRepeat()==$listRepeat)
				if ($curName$list== null){
					logging.warn(" $curName$list not set");
					throw new MissingParameterException("  $curName$list not set");
				} 
				for ($field.getType() field : $curName$list){
					##choices have to be set by the actual name - not the name of the interface
					xmlElement.addContent(field$encodeXML(field.getClass().getName().replaceAll(field.getClass().getPackage().getName()+".", "")));
				}
			#elseif ($field.getRepeat()== $optionalRepeat)
				if ($curName$list == null){
					logging.info("$curName$list not set");
				} else {
					for ($field.getType() field : $curName$list){
						xmlElement.addContent(field$encodeXML(field.getClass().getName().replaceAll(field.getClass().getPackage().getName()+".", "")));
					}
				}
			#elseif ($field.getRepeat()== $optionalParameter)
				if ($curName == null){
					logging.info("$curName not set");
				} else {
					xmlElement.addContent($curName$encodeXML("$field.getType()"));
				}
			#elseif ($field.getRepeat()== $singleParameter)
				if ($curName == null){
					logging.info("$curName not set");
					throw new MissingParameterException("$curName not set");
				} else {
					xmlElement.addContent($curName$encodeXML("$field.getType()"));
				}
			#else
				// TODO field.getRepeat() = $field.getRepeat()
			#end
		#end
		return xmlElement;
	}
	
	
##decode
  
  	@Override
	protected void decodeBinarySpecific(LLRPBitList binary){
		int position = 0;
		int tempByteLength;
		int tempLength;
		int count;
		SignedShort type;
		int fieldCount;
		Custom custom;
		## field or reserved
		#foreach($field in $parameter.getFieldOrReserved())
			## reserved field
			#if ($utility.hasType($field,$reservedDefinition))
				position+= $resName$length;
			#elseif ($utility.hasType($field,$fieldDefinition))
				#set ($curName = $utility.firstToLowerCase($field.getName()))
				#if ($field.getEnumeration())
					#set ($curType = $field.getEnumeration())
				#else
					#set ($curType = $utility.convertType($field.getType().value()))
				#end
				#if ($utility.isArray($curType))
					// array. first 16 bits indicate length of array
					fieldCount = new UnsignedShort(binary.subList(position, UnsignedShort.length())).toShort();			
					tempLength=$curType$length*fieldCount+UnsignedShort.length();
					$curName = new $curType (binary.subList(position, tempLength));
					position += tempLength;
					logging.debug("decoding array of type: $curType with "+tempLength+" length");
					//might need padding
					// must always be blocks of 8 bites, if it is a bitlist, this might not be automatically the case
					if (tempLength%8>0){
						position+=(8-tempLength%8);
						logging.info("padding needed for $curName ");
					} 
				#elseif ($utility.isByteToEnd($curType))
					$curName = new $curType (binary.subList(position, binary.length()-position));
					position += binary.length()-position;

				#else
					// length given through static method
					$curName = new $curType (binary.subList(position, $curType$length));
					position += $curType$length;
				#end
			#else
						//TODO template wrote this - unexpected object $field
			#end
		#end  
		
		
		## parameter or choice
		#foreach($field in $parameter.getParameterOrChoice())
		## get name first, not all have a name attribute
		#if ($field.getName())
			#set ($curName = $utility.firstToLowerCase($field.getName()))
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end
		## check if it is a list 	
		#if ($field.getRepeat()==$listRepeat  || $field.getRepeat()== $optionalRepeat)
			// list of parameters
			$curName$list = new LinkedList<$field.getType()>();
			logging.debug("decoding parameter $curName$list ");
			while (position < binary.length()){
				boolean atLeastOnce = false;
				// look ahead to see type
				type = new SignedShort(binary.subList(position+reservedLength, typeNumberLength));
				tempByteLength = new UnsignedShort(binary.subList(position+reservedLength+ typeNumberLength, UnsignedShort.length())).toShort();			
				tempLength=8*tempByteLength;
				##distinguish between choices and parameters. For choices, we must find the actual types
				#if ($utility.hasType($field,$choiceReference))
					//choiceRef
					##check all subtypes
					#foreach ($subtype in $utility.getSubTypes($field.getType()))
						#if ($utility.isCustom($subtype))
							## custom parameter need separate treatment
							// custom
						if(type.equals(Custom$typeNum)){
							Custom cus = new Custom(binary.subList(position,tempLength)); 
							//allowed custom parameters for this parameter	
							#foreach ($custom in $utility.allowedCustom($parameter.getName()))
								if (cus.getParameterSubtype().equals($custom$subtypeNr)){ 
									$curName$list$add (new $custom (cus));
									atLeastOnce = true;
									logging.debug("adding $custom to $curName$list ");	
									position+=tempLength;
									atLeastOnce = true;
									continue;
								}
							#end	
							//end allowed parameters
							//if none matched continue wasn't called and we add just cus as we found no specific vendor implementation
							$curName$list$add (cus);
							position+=tempLength;
							atLeastOnce = true;
							continue;
						}
						#else						
							if (type.equals($subtype$typeNum)){
								$curName$list$add (new $subtype (binary.subList(position,tempLength)));
								logging.debug("adding $subtype to $curName$list ");
								position+=tempLength;
								atLeastOnce = true;
								continue;
							}
						#end
						
					#end
					
					//if no parameter matched, jump out of while loop, if it is not an optional parameter, show warning
					if (!atLeastOnce && (" $field.getRepeat() ".equals(" $listRepeat "))){
						logging.warn("encoded message does not contain non optional parameter $curName$list");
					}
					break;
				#elseif ($utility.isCustom($field.getType()))
							## custom parameter need separate treatment
							// custom
						if(type.equals(Custom$typeNum)){
							Custom cus = new Custom(binary.subList(position,tempLength)); 
							//allowed custom parameters for this parameter	
							#foreach ($custom in $utility.allowedCustom($parameter.getName()))
								if (cus.getParameterSubtype().equals($custom$subtypeNr)){ 
									$curName$list$add (new $custom (cus));
									atLeastOnce = true;
									logging.debug("adding $custom to $curName$list ");	
									position+=tempLength;
									atLeastOnce = true;
									continue;
								}
							#end	
							//end allowed parameters
							//if none matched continue wasn't called and we add just cus as we found no specific vendor implementation
							$curName$list$add (cus);
							position+=tempLength;
							atLeastOnce = true;
							continue;
						}
				#elseif ($utility.hasType($field,$parameterReference))
					//paramRef
					$curName$list$add (new $field.getType() (binary.subList(position,tempLength)));
					logging.debug("adding $field.getType() to $curName$list ");
					position+=tempLength;		
				#else
					//TODO template wrote this in decode > list- unexpected object $field in while
				#end
			}
		#elseif ($field.getRepeat()==$singleParameter || $field.getRepeat() == $optionalParameter)
			## single parameter - must be set 
			// look ahead to see type
			// may be optional or exactly once
			type = null;
			tempByteLength = 0;			
			tempLength=0;
			
			try {
				type = new SignedShort(binary.subList(position+reservedLength, typeNumberLength));
				tempByteLength = new UnsignedShort(binary.subList(position+reservedLength+ typeNumberLength, UnsignedShort.length())).toShort();			
				tempLength=8*tempByteLength;
			
			} catch (LLRPException le) {
				// no parameter has type 0 - will auomatically run into error message as no type will match
				type = new SignedShort(0);
				// if a LLRPException is thrown, list was not long enough so the parameter is missing
				## throw exception only when single Parameter - if it is optinal it is okay that it is not set
				#if ( $field.getRepeat() == $singleParameter)
					logging.warn("$parameter.getName() misses non optional parameter of type $field.getType()");
					throw new MissingParameterException("$parameter.getName() misses non optional parameter of type $field.getType()");
				#else
				##if it is optional, just inform that it is not set
					logging.info("$parameter.getName() misses non optional parameter of type $field.getType()");
				#end
			}
			##distinguish between choices and parameters. For choices, we must find the actual types
			#if ($utility.hasType($field,$choiceReference))
				##check all subtypes
				boolean found = false;
				logging.debug("decoding choice type $field.getType() ");
				#foreach ($subtype in $utility.getSubTypes($field.getType()))
					#if ($utility.isCustom($subtype))
					## custom parameter need separate treatment
					// custom
						if(type.equals(Custom$typeNum)){
							Custom cus = new Custom(binary.subList(position,tempLength)); 
							//allowed custom parameters for this parameter	
							#foreach ($custom in $utility.allowedCustom($parameter.getName()))
								if (cus.getParameterSubtype().equals($custom$subtypeNr)){ 
									$curName=new $custom (cus);
									atLeastOnce = true;
									logging.debug("adding $custom to $curName$list ");	
									position+=tempLength;
									atLeastOnce = true;
									continue;
								}
							#end	
							//end allowed parameters
							//if none matched continue wasn't called and we add just use cus as custom parameter as we found no specific vendor implementation
							$curName =cus;
							position+=tempLength;
							found = true;
						}
					#else						
						if (type.equals($subtype$typeNum)){
							$curName = new $subtype (binary.subList(position,tempLength));
							logging.debug(" $curName instatiated to $subtype with length "+tempLength);
							position += tempLength;
							found = true;
						}
					#end
				#end
				if (!found){
					logging.warn("encoded message misses non optional parameter $curName");
					throw new MissingParameterException("$parameter.getName() misses non optional parameter of type $field.getType()");
				}
			#elseif ($utility.isCustom($field.getType()))
			    if(type.equals(Custom$typeNum)){
					## custom parameter need separate treatment
					// custom
					Custom cus = new Custom(binary.subList(position,tempLength)); 
					//allowed custom parameters for this parameter	
					#foreach ($custom in $utility.allowedCustom($parameter.getName()))
						if (cus.getParameterSubtype().equals($custom$subtypeNr)){ 
							$curName=new $custom (cus);
							atLeastOnce = true;
							position+=tempLength;
						}
					#end	
					//end allowed parameters
					//if none matched continue wasn't called and we add just use cus as custom parameter as we found no specific vendor implementation
					if ($curName == null){
						$curName =cus;
						position+=tempLength;
						found = true;
					}
				}
				if (!found){
					#if ( $field.getRepeat() == $singleParameter)
						logging.warn("$parameter.getName() misses non optional parameter of type $field.getType()");
						throw new MissingParameterException("$parameter.getName() misses non optional parameter of type $field.getType()");
					#else	
						##if it is optional, just inform that it is not set
						logging.info("$parameter.getName() misses non optional parameter of type $field.getType()");
					#end
				}				
			#elseif ($utility.hasType($field,$parameterReference))
				if(type.equals($field.getType()$typeNum)){
					$curName = new $field.getType() (binary.subList(position,tempLength));	
					position+=tempLength;
					logging.debug(" $curName is instantiated with $field.getType() with length"+tempLength);
				} else {
					## if it is an optional parameter it is ok to come to here. Therefor only print an error message if it is not optional
					#if ( $field.getRepeat() == $singleParameter)
						logging.warn("$parameter.getName() misses non optional parameter of type $field.getType()");
						throw new MissingParameterException("$parameter.getName() misses non optional parameter of type $field.getType()");
					#else	
						##if it is optional, just inform that it is not set
						logging.info("$parameter.getName() misses non optional parameter of type $field.getType()");
					#end
				}	
			#end
		#else
			//TODO template wrote this - unexpected object $field
		#end
	#end
  	}
  	
  	
  	
  		
##decode XML
  
  	@Override
	public void decodeXML(Element element){
		Element temp = null;
		List<Element> tempList = null;
		boolean atLeastOnce = false;
		## field or reserved
		#foreach($field in $parameter.getFieldOrReserved())
			## reserved field
			#if ($utility.hasType($field,$reservedDefinition))
				## skip reserved
			#elseif ($utility.hasType($field,$fieldDefinition))
				#set ($curName = $utility.firstToLowerCase($field.getName()))
				#if ($field.getEnumeration())
					#set ($curType = $field.getEnumeration())
				#else
					#set ($curType = $utility.convertType($field.getType().value()))
				#end
				temp = element.getChild("$field.getName()");
				if (temp != null){
					$curName = new $curType (temp);
				}
			#else
						//TODO template wrote this - unexpected object $field
			#end
		#end  
		
		
		## parameter or choice
		#foreach($field in $parameter.getParameterOrChoice())
			#if ($field.getName())
				#set ($curName = $utility.firstToLowerCase($field.getName()))
			#else
				#set ($curName = $utility.firstToLowerCase($field.getType()))
			#end
			#if ($utility.hasType($field,$parameterReference))
				//parameter - not choices - no special actions needed
				#if ($field.getRepeat()==$listRepeat  || $field.getRepeat()== $optionalRepeat)
					//we expect a list of parameters
					$curName$list = new LinkedList<$field.getType()>();
					tempList = element.getChildren("$field.getType()");
					for (Element e : tempList){
						#if ($utility.isCustom($field.getType()))
							//custom parameter
							#foreach ($custom in $utility.allowedCustom($custom))
								tempList = element.getChildren("$custom");
								for Element e: tempList){
									custom = new Custom(e); 
									$curName$list$add (new $custom (custom));
									atLeastOnce = true;
									logging.debug("adding $custom to $curName$list ");
								}
							#end
							//end custom
						#else 
							$curName$list$add (new $field.getType()(e));
							logging.debug("adding $field.getType() to $curName$list ");
						#end
					}	
					#if ( $field.getRepeat() == $listRepeat)
						if (tempList == null || tempList.isEmpty() ){
							logging.warn("$parameter.getName() misses non optional parameter of type $curName$list");
							throw new MissingParameterException("$parameter.getName() misses non optional parameter of type $curName$list");
						}
					#else
					##if it is optional, just inform that it is not set
						if (tempList == null || tempList.isEmpty() ){
							logging.info("$parameter.getName() misses non optional parameter of type $curName$list");
						}
					#end			
				#else
					// single parameter
					temp = element.getChild("$field.getType()");
					if (temp != null){
						$curName = new $field.getType()(temp);
						logging.info("setting parameter $curName for parameter $parameter.getType()");
					} else {
						#if ( $field.getRepeat() == $singleParameter)
							logging.warn("$parameter.getName() misses non optional parameter of type $curName");
							throw new MissingParameterException("$parameter.getName() misses non optional parameter of type $curName");
						#else
							##if it is optional, just inform that it is not set
							logging.info("$parameter.getName() misses non optional parameter of type $curName");
						#end
					}
				#end		
			#elseif ($utility.hasType($field,$choiceReference))
				//choices - must check all possible subtypes
				#if ($field.getRepeat()==$listRepeat  || $field.getRepeat()== $optionalRepeat)
					//list of Choice Type Parameter
					$curName$list = new LinkedList<$field.getType()>();
					// for each possible subtype get all childs
						##check all subtypes
						#foreach ($subtype in $utility.getSubTypes($field.getType()))
							#if ($utility.isCustom($subtype))
								## custom parameter need separate treatment
								// check for all custom parameters allowed for this parameter 
								#foreach ($custom in $utility.allowedCustom($custom))
									tempList = element.getChildren("$custom");
									for Element e: tempList){
										custom = new Custom(e); 
										$curName$list$add (new $custom (custom));
										atLeastOnce = true;
										logging.debug("adding $custom to $curName$list ");
									}
								#end
								//end allowed parameters
							#else
								tempList = element.getChildren("$subtype");
								for (Element e : tempList){
									$curName$list$add (new $subtype(e));
									logging.debug("adding $subtype to $curName$list ");
								}
								
							#end
							
						#end
						if (!atLeastOnce){
							#if ( $field.getRepeat() == $listRepeat)
								logging.warn("$parameter.getName() misses non optional parameter of type $curName$list");
								throw new MissingParameterException("$parameter.getName() misses non optional parameter of type $curName$list");
							#else
								logging.info("$parameter.getName() misses non optional parameter of type $curName$list");
							#end	
						}
						atLeastOnce = false;		
				#else
				
					##check all subtypes
					boolean found = false;
					logging.debug("decoding choice type $field.getType() ");
					#foreach ($subtype in $utility.getSubTypes($field.getType()))
						#if ($utility.isCustom($subtype))
							## custom parameter need separate treatment
							// custom
							temp = element.getChild("$subtype");
							if (temp != null){
								custom = new $field.getType() (temp));	
								#foreach ($custom in $utility.allowedCustom($field.getType()))
									if (temp.getName().equalsIgnoreCase("$custom")){ 
										$curName =new $custom (custom) ;
										logging.debug(" $curName is instantiated with $custom ");
									}
								#end
							}
						#else		
							// try to get child for each possible subtype
							temp = element.getChild("$subtype");			
							if (temp != null){
								$curName = new $subtype (temp);
								logging.debug(" $curName instatiated to $subtype with");
								found = true;
							} 
						#end
					#end
					if (!found){
						#if ( $field.getRepeat() == $listRepeat)
							logging.warn("$parameter.getName() misses non optional parameter of type $curName$list");
							throw new MissingParameterException("$parameter.getName() misses non optional parameter of type $curName$list");
						#else
						##if it is optional, just inform that it is not set
							logging.info("$parameter.getName() misses non optional parameter of type $curName$list");
						#end	
					}				
				
				#end
			#else
				//TODO template wrote this in decode > list- unexpected object $field in while
			#end	
		#end
  	}
  	
  	
  	
  	
  	
  	
## generate getters 
	//getters
	## field or reserved
	#foreach($field in $parameter.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			## nothing
		#elseif ($utility.hasType($field,$fieldDefinition))
		
			#if ($field.getEnumeration())
				public $field.getEnumeration() get$field.getName()$emptyBrack{
					return $utility.firstToLowerCase($field.getName());
				}
			#else
				public $utility.convertType($field.getType().value()) get$field.getName()$emptyBrack{
					return $utility.firstToLowerCase($field.getName());
				}
			#end

		## FieldDefinition
		#else
					//TODO template wrote this - unexpected object $field
		#end	
	#end


	## parameter or choice
	#foreach($field in $parameter.getParameterOrChoice())
		## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
		## however there are some exceptions to this where there is a name given
		#if ($field.getName())
			#set ($curName = $utility.firstToLowerCase($field.getName()))
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end 
		#if ($field.getRepeat()== $listRepeat  || $field.getRepeat()== $optionalRepeat)
			public List<$field.getType()> get$utility.firstToUpperCase($curName)$list$emptyBrack {
				return $curName$list;
			}
				
		#else
			public $field.getType() get$utility.firstToUpperCase($curName)$emptyBrack  {
				return $curName;
			}
		#end
	#end


	
## generate setters 
	//setters
	## field or reserved
	#foreach($field in $parameter.getFieldOrReserved())
		## reserved field
		#if ($utility.hasType($field,$reservedDefinition))
			## nothing
		#elseif ($utility.hasType($field,$fieldDefinition))
			#set ($curName = $utility.firstToLowerCase($field.getType()))
			#if ($field.getEnumeration())
				public void  set$field.getName() ($field.getEnumeration() $utility.firstToLowerCase($field.getName())){
					this.$utility.firstToLowerCase($field.getName()) = $utility.firstToLowerCase($field.getName());
				}
			#else
				public void  set$field.getName() ($utility.convertType($field.getType().value()) $utility.firstToLowerCase($field.getName())){
					this.$utility.firstToLowerCase($field.getName()) = $utility.firstToLowerCase($field.getName());
				}
			#end

		## FieldDefinition
		#else
					//TODO template wrote this - unexpected object $field
		#end	
	#end


	## parameter or choice
	#foreach($field in $parameter.getParameterOrChoice())
		## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
		## however there are some exceptions to this where there is a name given
		#if ($field.getName())
			#set ($curName = $utility.firstToLowerCase($field.getName()))
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end 
		#if ($field.getRepeat()== $listRepeat  || $field.getRepeat()== $optionalRepeat)
			public void set$utility.firstToUpperCase($curName)$list (List<$field.getType()> $curName$list) {
				this.$curName$list = $curName$list;
			}
				
		#else
			public void set$utility.firstToUpperCase($curName) ($field.getType()  $curName)  {
				this. $curName =  $curName;
			}
		#end
	#end

	
	
	
//add methods
	## parameter or choice
	#foreach($field in $parameter.getParameterOrChoice())
		## parameters usually don't have names, so the variable gets the typ with first letter to lower case as name
		## however there are some exceptions to this where there is a name given
		#if ($field.getName())
			#set ($curName = $utility.firstToLowerCase($field.getName()))
		#else
			#set ($curName = $utility.firstToLowerCase($field.getType()))
		#end 
		#if ($field.getRepeat()== $listRepeat  || $field.getRepeat()== $optionalRepeat)
			public void add$utility.firstToUpperCase($curName) ($field.getType() $curName) {
				if (this.$curName$list == null){
					this.$curName$list = new LinkedList<$field.getType()>();
				} 
			 	this.$curName$list$add ($curName);
			}
				
		#else
		#end
	#end

	
	
	
	@Override
	public SignedShort getTypeNum() {
		return typeNum;
	}
	
## end of Class	
}
