<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:llrp="http://www.llrp.org/ltk/schema/core/encoding/binary/1.0"
  xmlns:h="http://www.w3.org/1999/xhtml">
  <xsl:output omit-xml-declaration='yes' method='text' indent='yes'/>
  <xsl:variable name='vendor_name'>
    <xsl:value-of select="/llrp:llrpdef/llrp:vendorDefinition/@name"/>
  </xsl:variable>
  <xsl:variable name ="vendor_id">
    <xsl:value-of select="/llrp:llrpdef/llrp:vendorDefinition/@vendorID"/>
  </xsl:variable>
  
  <xsl:template match="/llrp:llrpdef">
    /*
    ***************************************************************************
    *  Copyright 2007 Impinj, Inc.
    *
    *  Licensed under the Apache License, Version 2.0 (the "License");
    *  you may not use this file except in compliance with the License.
    *  You may obtain a copy of the License at
    *
    *      http://www.apache.org/licenses/LICENSE-2.0
    *
    *  Unless required by applicable law or agreed to in writing, software
    *  distributed under the License is distributed on an "AS IS" BASIS,
    *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    *  See the License for the specific language governing permissions and
    *  limitations under the License.
    *
    ***************************************************************************
    */

    /*
    ***************************************************************************
    *
    *  This code is generated by Impinj LLRP .Net generator. Modification is not
    *  recommended.
    *
    ***************************************************************************
    */

    /*
    ***************************************************************************
    * File Name:       VendorExt.cs
    * Author:          Your Name
    * Organization:    Your Company
    * Date:            Date
    * Description:     This file contains LLRP vendor extension
    ***************************************************************************
    */

    using System;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Reflection;


    using Org.LLRP.LTK.LLRPV1;
    using Org.LLRP.LTK.LLRPV1.DataType;

    namespace Org.LLRP.LTK.LLRPV1.<xsl:copy-of select="$vendor_name"/>
    {

    #region Custom Parameter Interface
    <xsl:for-each select ="llrp:customParameterDefinition">
      <xsl:variable name="custom_param_name">
        <xsl:value-of select="@name"/>
      </xsl:variable>
      <xsl:for-each select="llrp:parameter">
        <xsl:if test="@type='Custom'">
          public interface I<xsl:copy-of select="$custom_param_name"/>_Custom_Param : ICustom_Parameter {}
        </xsl:if>
      </xsl:for-each>
    </xsl:for-each>
    #endregion

    <xsl:for-each select="llrp:customChoiceDefinition">
      ///<xsl:text disable-output-escaping="yes">&lt;</xsl:text>summary<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
      ///Allowed types: <xsl:for-each select="parameter">PARAM_<xsl:value-of select="@type"/>,</xsl:for-each>
      ///<xsl:text disable-output-escaping="yes">&lt;</xsl:text>/summary<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
      public class UNION_<xsl:value-of select="@name"/> : ParamArrayList{}
    </xsl:for-each>
    public class PARAM_<xsl:copy-of select="$vendor_name"/>_Custom : PARAM_Custom
    {
    //Add vendor custom parameter implementation while applicable.
    public override void ToBitArray(ref bool[] bit_array, ref int cursor) { }
    public new static PARAM_<xsl:copy-of select="$vendor_name"/>_Custom FromBitArray(ref BitArray bit_array, ref int cursor, int length) { return null; }
    public override string ToString() { return null; }
    public new static PARAM_<xsl:copy-of select="$vendor_name"/>_Custom FromXmlNode(XmlNode node) { return null; }
    }
    
    <xsl:for-each select="llrp:customEnumerationDefinition">
      /// <xsl:text disable-output-escaping="yes">&lt;</xsl:text>summary<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
      /// <xsl:for-each select ="llrp:annotation/llrp:description/h:p"><xsl:value-of select="."/></xsl:for-each>
      /// <xsl:text disable-output-escaping="yes">&lt;</xsl:text>/summary<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
      public enum ENUM_<xsl:value-of select="@name"/>
      {
      <xsl:for-each select="llrp:entry">
        <xsl:value-of select="@name"/> = <xsl:value-of select="@value"/>,
      </xsl:for-each>
      }
    </xsl:for-each>   
    
    <xsl:for-each select="llrp:customParameterDefinition">
      <xsl:variable name="inherited_interfaces">
        <xsl:for-each select="llrp:allowedIn">,I<xsl:value-of select="@type"/>_Custom_Param</xsl:for-each>
      </xsl:variable>
      /// <xsl:text disable-output-escaping="yes">&lt;</xsl:text>summary<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
      /// <xsl:for-each select ="llrp:annotation/llrp:description/h:p"><xsl:value-of select="."/></xsl:for-each>
      /// <xsl:text disable-output-escaping="yes">&lt;</xsl:text>/summary<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
      public class PARAM_<xsl:value-of select="@name"/> : PARAM_Custom<xsl:copy-of select="$inherited_interfaces"/>
      {
      public UInt32 VENDOR_ID{get{return VendorIdentifier;}}
      public UInt32 SUB_TYPE{get{return ParameterSubtype;}}

      public PARAM_<xsl:value-of select="@name"/>()
      {
      VendorIdentifier = <xsl:copy-of select="$vendor_id"/>;
      ParameterSubtype = <xsl:value-of select="@subtype"/>;
      }
      <xsl:for-each select="*">
        <xsl:if test="name()='field'">
          public <xsl:call-template name='DefineDataType'/><xsl:text> </xsl:text><xsl:value-of select="@name"/><xsl:call-template name='DefineDefaultValue'/>
          <xsl:call-template name="DefineDataLength"/>
        </xsl:if>
        <xsl:if test="name()='reserved'">
          private const UInt16 param_reserved_len<xsl:copy-of select="position()"/>= <xsl:value-of select="@bitCount"/>;
        </xsl:if>
        <xsl:if test="name()='parameter'">
          <xsl:choose>
            <xsl:when test="@type='Custom'">
           <xsl:choose>
            <xsl:when test="contains(@repeat, '0-N') or contains(@repeat, '1-N')">
              public PARAM_<xsl:copy-of select="$vendor_name"/>_Custom[] <xsl:call-template name='DefineParameterName'/>;
            </xsl:when>
            <xsl:otherwise>
              public PARAM_<xsl:copy-of select="$vendor_name"/>_Custom <xsl:call-template name='DefineParameterName'/>;
            </xsl:otherwise>
          </xsl:choose>             
            </xsl:when>
            <xsl:otherwise>
           <xsl:choose>
            <xsl:when test="contains(@repeat, '0-N') or contains(@repeat, '1-N')">
              public PARAM_<xsl:value-of select="@type"/>[] <xsl:call-template name='DefineParameterName'/>;
            </xsl:when>
            <xsl:otherwise>
              public PARAM_<xsl:value-of select="@type"/><xsl:text> </xsl:text><xsl:call-template name='DefineParameterName'/>;
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:if>
        <xsl:if test="name()='choice'">
          <xsl:variable name="choiceParameterName">
            <xsl:call-template name='DefineParameterName'/>
          </xsl:variable>
          public UNION_<xsl:value-of select="@type"/><xsl:text> </xsl:text><xsl:call-template name='DefineParameterName'/> = new UNION_<xsl:value-of select="@type"/>();
        </xsl:if>
      </xsl:for-each>
      
      <xsl:call-template name="VendorPARAMEncodeToBitArray"/>
      <xsl:call-template name="VendorPARAMDecodeFromBitArray"/>
      <xsl:call-template name="VendorPARAMToString"/>
      <xsl:call-template name="VendorPARAMFromXmlNode"/>
}
</xsl:for-each>
    
    <xsl:for-each select="llrp:customMessageDefinition">
      /// <xsl:text disable-output-escaping="yes">&lt;</xsl:text>summary<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
      /// <xsl:for-each select ="llrp:annotation/llrp:description/h:p"><xsl:value-of select="."/></xsl:for-each>
      /// <xsl:text disable-output-escaping="yes">&lt;</xsl:text>/summary<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
      public class MSG_<xsl:value-of select="@name"/> : Message
    {
    UInt32 vendor_id = <xsl:copy-of select="$vendor_id"/>;
    byte sub_type = <xsl:value-of select="@subtype"/>;

    public UInt32 VENDOR_ID{get{return vendor_id;}}
    public Byte SUB_TYPE{get{return sub_type;}}

    <xsl:if test="contains(@name, 'ENABLE_EXTENSION') and not(contains(@name, 'RESPONSE'))">
      static MSG_<xsl:value-of select="@name"/>()
      {
      Assembly asm = Assembly.GetCallingAssembly();
      CustomParamDecodeFactory.LoadVendorExtentionAssembly(asm);
      }
    </xsl:if>

      <xsl:for-each select="*">
    <xsl:if test="name()='field'">
    public <xsl:call-template name='DefineDataType'/><xsl:text> </xsl:text><xsl:value-of select="@name"/><xsl:call-template name='DefineDefaultValue'/>
    <xsl:call-template name="DefineDataLength"/>
  </xsl:if>
    <xsl:if test="name()='reserved'">
    private const UInt16 param_reserved_len<xsl:copy-of select="position()"/> = <xsl:value-of select="@bitCount"/>;
  </xsl:if>
    <xsl:if test="name()='parameter'">
    <xsl:choose>
      <xsl:when test="@type='Custom'">
        <xsl:choose>
          <xsl:when test="contains(@repeat, '0-N') or contains(@repeat, '1-N')">
            public PARAM_<xsl:copy-of select="$vendor_name"/>_Custom[] <xsl:call-template name='DefineParameterName'/>;
          </xsl:when>
          <xsl:otherwise>
            public PARAM_<xsl:copy-of select="$vendor_name"/>_Custom <xsl:call-template name='DefineParameterName'/>;
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="contains(@repeat, '0-N') or contains(@repeat, '1-N')">
            public PARAM_<xsl:value-of select="@type"/>[] <xsl:call-template name='DefineParameterName'/>;
          </xsl:when>
          <xsl:otherwise>
            public PARAM_<xsl:value-of select="@type"/><xsl:text> </xsl:text><xsl:call-template name='DefineParameterName'/>;
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:if>
    <xsl:if test="name()='choice'">
    public UNION_<xsl:value-of select="@type"/><xsl:text> </xsl:text><xsl:call-template name='DefineParameterName'/> = new UNION_<xsl:value-of select="@type"/>();
    <!--public ENUM_<xsl:value-of select="@type"/>_TYPE <xsl:call-template name='DefineParameterName'/>_type;-->
  </xsl:if>    
    </xsl:for-each>   
      <xsl:call-template name="ToCustomMessage"/>
      <xsl:call-template name="FromCustomMessage"/>
      <xsl:call-template name="VendorMSGToString"/>
      <xsl:call-template name="VendorMSGFromString"/>
      }
    </xsl:for-each>
    }

  </xsl:template>

  <xsl:include href="templates.xslt"/>


  <xsl:template name="FromCustomMessage">
    /// <xsl:text disable-output-escaping="yes">&lt;</xsl:text>summary<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
    /// Parse MSG_CUSTOM_MESSAGE to vendor extended message
    /// <xsl:text disable-output-escaping="yes">&lt;</xsl:text>/summary<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
    /// <xsl:text disable-output-escaping="yes">&lt;</xsl:text>param name="msg">Custom message to be parsed<xsl:text disable-output-escaping="yes">&lt;</xsl:text>/param<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
    /// <xsl:text disable-output-escaping="yes">&lt;</xsl:text>returns>Vendor extended message<xsl:text disable-output-escaping="yes">&lt;</xsl:text>/returns<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
    public static MSG_<xsl:value-of select="@name"/> FromCustomMessage(MSG_CUSTOM_MESSAGE msg)
    {
    MSG_<xsl:value-of select="@name"/> obj = new MSG_<xsl:value-of select="@name"/>();
    if(msg==null || msg.MessageSubtype != obj.sub_type)return null;

    object obj_val;
    int field_len;
    UInt16 loop_control_counter = 1;    //used for control choice element parsing loop

    //msgType = msg.msgType;
    obj.VERSION = msg.VERSION;
    obj.Length = msg.Length;
    obj.MSG_ID = msg.MSG_ID;

    ArrayList param_list;

    BitArray bit_array = Util.ConvertByteArrayToBitArray(msg.Data.ToArray());
    int cursor = 0;
    int length = bit_array.Count;

    <xsl:for-each select="*">
      <xsl:if test="name()='field'">
        if(cursor<xsl:text disable-output-escaping="yes">&gt;</xsl:text>length)throw new Exception("Input data is not complete message");
        <xsl:if test="@type='u1v' or @type='u8v' or @type='u16v' or @type='u32v' or @type='utf8v' or @type='bytesToEnd'">
          field_len = Util.DetermineFieldLength(ref bit_array, ref cursor);
        </xsl:if>
        <xsl:if test="@type='u96'">
          field_len = 96;
        </xsl:if>
        <xsl:if test="@type='u2'">
          field_len = 2;
        </xsl:if>
        <xsl:if test="@type='u1'">
          field_len = 1;
        </xsl:if>
        <xsl:if test="@type='u8' or @type='s8'">
          field_len = 8;
        </xsl:if>
        <xsl:if test="@type='u16' or @type='s16'">
          field_len = 16;
        </xsl:if>
        <xsl:if test="@type='u32'">
          field_len = 32;
        </xsl:if>
        <xsl:if test="@type='u64'">
          field_len = 64;
        </xsl:if>
        <xsl:choose>
          <xsl:when test="@enumaration">
            UInt32 val;
            Util.ConvertBitArrayToObj(ref bit_array, ref cursor, out val, typeof(UInt32), field_len);
            obj.<xsl:value-of select="@name"/> = (<xsl:call-template name='DefineDataType'/>)val;
          </xsl:when>
          <xsl:otherwise>
            Util.ConvertBitArrayToObj(ref bit_array, ref cursor, out obj_val, typeof(<xsl:call-template name='DefineDataType'/>), field_len);
            obj.<xsl:value-of select="@name"/> = (<xsl:call-template name='DefineDataType'/>)obj_val;
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
      <xsl:if test="name()='reserved'">
        cursor += param_reserved_len<xsl:copy-of select="position()"/>;
      </xsl:if>
      <xsl:if test="name()='parameter'">
        <xsl:choose>
          <xsl:when test="@type='Custom'">
            <xsl:if test="@repeat = '1-N' or @repeat = '0-N'">
              param_list = new ArrayList();
              PARAM_<xsl:copy-of select="$vendor_name"/>_Custom _param_<xsl:value-of select="@type"/> =  PARAM_<xsl:copy-of select="$vendor_name"/>_Custom.FromBitArray(ref bit_array, ref cursor, length);
              if(_param_<xsl:value-of select="@type"/>!=null)
              {param_list.Add(_param_<xsl:value-of select="@type"/>);
              while((_param_<xsl:value-of select="@type"/>=PARAM_<xsl:copy-of select="$vendor_name"/>_Custom.FromBitArray(ref bit_array, ref cursor, length))!=null)param_list.Add(_param_<xsl:value-of select="@type"/>);
              if(param_list.Count<xsl:text disable-output-escaping="yes">&gt;</xsl:text>0)
              {
              obj.<xsl:call-template name='DefineParameterName'/> = new PARAM_<xsl:copy-of select="$vendor_name"/>_Custom[param_list.Count];
              for(int i=0;i<xsl:text disable-output-escaping="yes">&lt;</xsl:text>param_list.Count;i++)
              obj.<xsl:call-template name='DefineParameterName'/>[i] = (PARAM_<xsl:copy-of select="$vendor_name"/>_Custom)param_list[i];
              }
              }
            </xsl:if>
            <xsl:if test="@repeat = '1' or @repeat='0-1'">
              obj.<xsl:call-template name='DefineParameterName'/> = PARAM_<xsl:copy-of select="$vendor_name"/>_Custom.FromBitArray(ref bit_array, ref cursor, length);
            </xsl:if>
          </xsl:when>
          <xsl:otherwise>
            <xsl:if test="@repeat = '1-N' or @repeat = '0-N'">
              param_list = new ArrayList();
              PARAM_<xsl:value-of select="@type"/> _param_<xsl:value-of select="@type"/> =  PARAM_<xsl:value-of select="@type"/>.FromBitArray(ref bit_array, ref cursor, length);
              if(_param_<xsl:value-of select="@type"/>!=null)
              {param_list.Add(_param_<xsl:value-of select="@type"/>);
              while((_param_<xsl:value-of select="@type"/>=PARAM_<xsl:value-of select="@type"/>.FromBitArray(ref bit_array, ref cursor, length))!=null)param_list.Add(_param_<xsl:value-of select="@type"/>);
              if(param_list.Count<xsl:text disable-output-escaping="yes">&gt;</xsl:text>0)
              {
              obj.<xsl:call-template name='DefineParameterName'/> = new PARAM_<xsl:value-of select="@type"/>[param_list.Count];
              for(int i=0;i<xsl:text disable-output-escaping="yes">&lt;</xsl:text>param_list.Count;i++)
              obj.<xsl:call-template name='DefineParameterName'/>[i] = (PARAM_<xsl:value-of select="@type"/>)param_list[i];
              }
              }
            </xsl:if>
            <xsl:if test="@repeat = '1' or @repeat='0-1'">
              obj.<xsl:call-template name='DefineParameterName'/> = PARAM_<xsl:value-of select="@type"/>.FromBitArray(ref bit_array, ref cursor, length);
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
      <xsl:if test="name()='choice'">
        <xsl:variable name="choiceParameterName">
          <xsl:call-template name='DefineParameterName'/>
        </xsl:variable>
        loop_control_counter = 1;
        while(loop_control_counter!=0)
        {
        loop_control_counter = 0;
        <xsl:for-each select='../../llrp:customChoiceDefinition'>
          <xsl:if test='@name=$choiceParameterName'>
            <xsl:for-each select='*'>
              PARAM_<xsl:value-of select='@type'/> _param_<xsl:value-of select='@type'/> = PARAM_<xsl:value-of select='@type'/>.FromBitArray(ref bit_array, ref cursor, length);
              if(_param_<xsl:value-of select='@type'/>!=null)
              {
              loop_control_counter++;
              obj.<xsl:copy-of select='$choiceParameterName'/>.Add(_param_<xsl:value-of select='@type'/>);
              }
              while((_param_<xsl:value-of select='@type'/> = PARAM_<xsl:value-of select='@type'/>.FromBitArray(ref bit_array, ref cursor, length))!=null){
              obj.<xsl:copy-of select='$choiceParameterName'/>.Add(_param_<xsl:value-of select='@type'/>);
              }
            </xsl:for-each>
          </xsl:if>
        </xsl:for-each>
        }
      </xsl:if>
    </xsl:for-each>
    return obj;
    }
  </xsl:template>
  <xsl:template name="ToCustomMessage">
    /// <xsl:text disable-output-escaping="yes">&lt;</xsl:text>summary<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
    /// Convert a vendor extended message to MSG_CUSTOM_MESSAGE.
    /// <xsl:text disable-output-escaping="yes">&lt;</xsl:text>/summary<xsl:text disable-output-escaping="yes">&gt;</xsl:text>
    public MSG_CUSTOM_MESSAGE ToCustomMessage()
    {
    int len = 0;
    int cursor = 0;
    bool[] bit_array = new bool[1000*1024*8];

    <xsl:for-each select="*">
      <xsl:if test="name()='field'">
        if(<xsl:value-of select="@name"/>!=null)
        {
        try
        {
        BitArray tempBitArr = Util.ConvertObjToBitArray(<xsl:value-of select="@name"/>, <xsl:value-of select="@name"/>_len);
        tempBitArr.CopyTo(bit_array, cursor);
        cursor += tempBitArr.Length;
        }
        catch{cursor +=<xsl:value-of select="@name"/>_len;}
        }
      </xsl:if>
      <xsl:if test="name()='reserved'">
        cursor += param_reserved_len<xsl:copy-of select="position()"/>;
      </xsl:if>
      <xsl:if test="name()='parameter'">
        if(<xsl:call-template name='DefineParameterName'/> != null)
        {
        <xsl:choose>
          <xsl:when test="@repeat = '0-N' or @repeat = '1-N'">
            len = <xsl:call-template name='DefineParameterName'/>.Length;
            for(int i=0; i<xsl:text disable-output-escaping="yes">&lt;</xsl:text>len;i++)
            <xsl:call-template name='DefineParameterName'/>[i].ToBitArray(ref bit_array, ref cursor);
          </xsl:when>
          <xsl:otherwise>
            <xsl:call-template name='DefineParameterName'/>.ToBitArray(ref bit_array, ref cursor);
          </xsl:otherwise>
        </xsl:choose>
        }
      </xsl:if>
      <xsl:if test="name()='choice'">
        <xsl:variable name="choiceParameterName">
          <xsl:call-template name='DefineParameterName'/>
        </xsl:variable>
        len = <xsl:copy-of select='$choiceParameterName'/>.Count;
        for(int i=0; i<xsl:text disable-output-escaping="yes">&lt;</xsl:text>len;i++)
        {
        Type type = <xsl:copy-of select='$choiceParameterName'/>[i].GetType();
        string type_name = type.Name;
        switch(type_name)
        {
        <xsl:for-each select='../../llrp:customChoiceDefinition'>
          <xsl:if test='@name=$choiceParameterName'>
            <xsl:for-each select='*'>
              case "PARAM_<xsl:value-of select='@type'/>":
              ((PARAM_<xsl:value-of select='@type'/>)(<xsl:copy-of select='$choiceParameterName'/>[i])).ToBitArray(ref bit_array, ref cursor);
              break;
            </xsl:for-each>
          </xsl:if>
        </xsl:for-each>
        }
        }
      </xsl:if>
    </xsl:for-each>

    int bit_len = cursor;
    len = bit_len/8;

    bool[] bit_data = new bool[bit_len];
    Array.Copy(bit_array, bit_data, bit_len);
    byte[] data = Util.ConvertBitArrayToByteArray(bit_data);

    MSG_CUSTOM_MESSAGE msg = new MSG_CUSTOM_MESSAGE();
    msg.VendorIdentifier = this.vendor_id;
    msg.MessageSubtype = this.sub_type;
    msg.MSG_ID = this.MSG_ID;
    msg.Length = (UInt32)(15+len);
    msg.Data = new ByteArray();
    for (int i = 0; i<xsl:text disable-output-escaping="yes">&lt;</xsl:text>len; i++) msg.Data.Add(data[i]);

    return msg;
    }
  </xsl:template>
  
  </xsl:stylesheet>